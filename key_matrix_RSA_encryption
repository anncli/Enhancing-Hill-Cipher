import numpy as np
import secrets
import sympy as sp

letters_to_num = dict({
    'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6, 'H': 7, 'I': 8, 'J': 9, 
    'K': 10, 'L': 11, 'M': 12, 'N': 13, 'O': 14, 'P': 15, 'Q': 16, 'R': 17, 'S': 18, 
    'T': 19, 'U': 20, 'V': 21, 'W': 22, 'X': 23, 'Y': 24, 'Z': 25
})
num_to_letters = dict({
    0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J',
    10: 'K', 11: 'L', 12: 'M', 13: 'N', 14: 'O', 15: 'P', 16: 'Q', 17: 'R', 18: 'S', 
    19: 'T', 20: 'U', 21: 'V', 22: 'W', 23: 'X', 24: 'Y', 25: 'Z'
})

def rsa_encode(plaintext: str, m: int) -> str:
    key_matrix = np.zeros((m, m)) # initialize empty key array

    # insert random values into key matrix
    # we need an invertible key matrix for decoding
    while np.linalg.det(key_matrix) == 0: # continue generating key matrices until an invertible one is found
        for i in range(m):
            for j in range(m):
                key_matrix[i, j] = secrets.randbelow(26)
    

    # encrypt key matrix with RSA encryption
    p = sp.randprime(0, 1000); # generate large prime p
    q = sp.randprime(0, 1000); # generate large prime q
    n = p * q # n is part of public and private keys
    phi = (p - 1) * (q - 1) # totient: number of integers less than n coprime to n

    # choose e, a value between 1 and phi(n) coprime to phi(n)
    e = secrets.randbelow(phi)
    while sp.gcd(e, phi) != 1:
        e = secrets.randbelow(phi)

    # d is private key, modular multiplicative inverse of e modulo phi(n)
    d = sp.mod_inverse(e, phi)

    flatten_key_RSA = key_matrix.flatten()

    encrypted_key_RSA = []
    for value in flatten_key_RSA:
      RSA_value = pow(int(value), e, n) # = m^n % e
      encrypted_key_RSA.append(RSA_value)

    RSA_key_matrix = np.array(encrypted_key_RSA).reshape(m, m);


    # for testing, decrypt encrypted RSA matrix to ensure it matches original
    decrypted_key_RSA = []
    for value in encrypted_key_RSA:
      decrypted_value = pow(int(value), d, n) # = c^d % n
      decrypted_key_RSA.append(decrypted_value)
    decrypted_key_RSA = np.array(decrypted_key_RSA).reshape(m, m)


    # convert plaintext into mx1 vector
    plaintext_matrix = []
    for c in plaintext:
        plaintext_matrix.append(letters_to_num[c])
    plaintext_matrix = np.atleast_2d(np.array(plaintext_matrix)).T # convert into mx1 numpy array


    # create ciphertext matrix
    ciphertext_matrix = np.matmul(key_matrix, plaintext_matrix)
    # convert values to valid range (0-25)
    ciphertext_matrix = ciphertext_matrix % 26

    # convert ciphertext matrix into ciphertext
    ciphertext = ""
    for k in range(m):
        ciphertext += num_to_letters[ciphertext_matrix[k, 0]]

    print("Key Matrix:\n", key_matrix)
    print("RSA Key Matrix:\n", RSA_key_matrix)
    print("Decrypted RSA Key Matrix:\n", decrypted_key_RSA)
    print("Plaintext Matrix:\n", plaintext_matrix)
    print("Ciphertext Matrix:\n", ciphertext_matrix)

    return ciphertext

if __name__=="__main__":
    # set parameters for testing
    m = 3 # key matrix dimensions
    plaintext = "CAT"

    print("Plaintext:", plaintext)
    ciphertext = rsa_encode(plaintext, m)
    print("Ciphertext:", ciphertext)
